version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - TWITTER_API_KEY=${TWITTER_API_KEY}
      - TWITTER_API_SECRET=${TWITTER_API_SECRET}
      - TWITTER_ACCESS_TOKEN=${TWITTER_ACCESS_TOKEN}
      - TWITTER_ACCESS_SECRET=${TWITTER_ACCESS_SECRET}
      - NOTION_API_KEY=${NOTION_API_KEY}
      - NOTION_DATABASE_ID=${NOTION_DATABASE_ID}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - db
      - redis
    restart: unless-stopped

  # Database service
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    restart: unless-stopped

  # Redis service for caching and rate limiting
  redis:
    image: redis:6
    ports:
      - "6379:6379"
    restart: unless-stopped

  # Nginx service for reverse proxy and load balancing
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped

volumes:
  # Volume for persisting PostgreSQL data
  postgres_data:

# Human tasks:
# - Regularly review and update service versions to ensure security and performance
# - Implement health checks for each service to ensure proper startup order
# - Consider adding a service for log aggregation (e.g., ELK stack)
# - Implement proper secrets management instead of using environment variables
# - Add resource limits to services to prevent resource exhaustion
# - Consider implementing service discovery for more dynamic scaling
# - Add monitoring and alerting services (e.g., Prometheus, Grafana)